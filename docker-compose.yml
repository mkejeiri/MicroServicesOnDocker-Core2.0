version: "3.2"

networks:
   frontend:
   backend:

services:
   webmvc:
      image: shoes/mvc
      build:
         context: .\src\Web\WebMvc
         dockerfile: Dockerfile
      environment:
         - ASPNETCORE_ENVIRONMENT=Development
         - CatalogUrl=http://catalog
         - IdentityUrl=http://tokenserver
         - CartUrl=http://cart
         - CartUrl=http://order
      container_name: webshop
      ports:
         - "5200:80"
      networks:
         - frontend
      depends_on:
         - catalog
         - tokenserver
         - cart
         - order
   catalog:
      image: shoes/catalog
      build:
         context: .\src\Services\productCatalogApi
         dockerfile: Dockerfile
      environment:
         - ASPNETCORE_ENVIRONMENT=Development
         - DatabaseServer=mssqlserver
         - DatabaseName=CatalogDb
         - DatabaseUser=sa
         - DatabaseUserPassword=!5F&svw1234
      container_name: catalogapi
      ports:
         - "5100:80"
      networks:
         - backend
         - frontend
      depends_on:
         - mssqlserver
   tokenserver:
      image: shoes/tokenserver
      build:
         context: .\src\Services\TokenServiceApi
         dockerfile: Dockerfile 
      environment:
         - ASPNETCORE_ENVIRONMENT=Development
         - MvcClient=http://10.0.75.1:5200
         - BasketApiClient=http://10.0.75.1:5500
         - OrderApiClient=http://10.0.75.1:5600
         - DatabaseServer=mssqlserver
         - DatabaseName=TokenServiceDb
         - DatabaseUser=sa
         - DatabaseUserPassword=!5F&svw1234
      container_name: tokenserverapi
      ports:
         - "5300:80"
      networks:
         - backend
         - frontend
      depends_on:
         - mssqlserver
   mssqlserver:
      image: microsoft/mssql-server-linux:latest
      ports:
         - "1490:1433"
      container_name: mssqlcontainer
      environment:
         - ACCEPT_EULA=Y
         - 'SA_PASSWORD=!5F&svw1234'
      networks:
         - backend
   cart:
      image: shoes/cart
      build: 
         context: .\src\Services\CartApi
         dockerfile: Dockerfile
      environment: 
         - ASPNETCORE_ENVIRONMENT=Development
         - IdentityUrl=http://10.0.75.1:5300
      container_name: cartapi
      ports:
         - "5500:80"
      networks:
         - backend
         - frontend
      depends_on:
         - cart.data
         - tokenserver
   order:
      image: shoes/order
      build: 
         context: .\src\Services\OrderApi
         dockerfile: Dockerfile
      environment: 
         - ASPNETCORE_ENVIRONMENT=Development
         - IdentityUrl=http://tokenserver
         - DatabaseServer=mssqlserver
         - DatabaseName=OrdersDb
         - DatabaseUser=sa
         - DatabaseUserPassword=!5F&svw1234
      container_name: orderapi
      ports:
         - "5600:80"
      networks:
         - backend
         - frontend
      depends_on:
         - mssqlserver
         - tokenserver
         - rabbitmq
   cart.data:
      image: redis
      ports:
         - "6377:6379"
      container_name: rediscontainer
      networks:
         - backend
   rabbitmq:
      image: rabbitmq:3-management
      ports:
         - "15672:15672"
         - "5672:5672"
         - "5671:5671"
      container_name: rabbitmq
      hostname: rabbitmq
      volumes:
         - ~/rabbitmq:/var/lib/rabbitmq/mnesia 
      networks:
         - backend